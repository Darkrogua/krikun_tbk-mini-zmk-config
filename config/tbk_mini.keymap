/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&mt { quick-tap-ms = <200>; };

/ {
    keymap {
        compatible = "zmk,keymap";

        DEF {
            bindings = <
                &kp KC_TAB &kp KC_Q &kp KC_W &kp KC_E &kp KC_R &kp KC_T
                &kp KC_CAPSLOCK &kp KC_A &kp LGUI_T(KC_S) &kp LALT_T(KC_D) &kp LCTL_T(KC_F) &kp LSFT_T(KC_G)
                &kp KC_GRAVE &kp KC_Z &kp KC_X &kp KC_C &kp KC_V &kp KC_B
                &none &none &none &kp KC_ESCAPE &kp MO(1) &kp KC_SPACE
                &kp KC_LBRACKET &kp KC_P &kp KC_O &kp KC_I &kp KC_U &kp KC_Y
                &kp KC_QUOTE &kp KC_SCOLON &kp LGUI_T(KC_L) &kp LALT_T(KC_K) &kp LCTL_T(KC_J) &kp LSFT_T(KC_H)
                &kp KC_RBRACKET &kp KC_SLASH &kp KC_DOT &kp KC_COMMA &kp KC_M &kp KC_N
                &none &none &none &kp KC_BSPACE &kp MO(2) &kp KC_ENTER
            >;
        };

        LWR {
            bindings = <
                &kp KC_GRAVE &kp LSFT(KC_1) &kp LSFT(KC_2) &kp LSFT(KC_3) &kp LSFT(KC_4) &kp LSFT(KC_5)
                &kp KC_CAPSLOCK &kp KC_1 &kp KC_2 &kp KC_3 &kp KC_4 &kp KC_5
                &kp KC_ESCAPE &kp KC_SLASH &kp LSFT(KC_COMMA) &kp LSFT(KC_BSLASH) &kp LSFT(KC_DOT) &kp KC_BSLASH
                &none &none &none &kp KC_TRNS &kp KC_TRNS &kp KC_TRNS
                &kp LSFT(KC_MINUS) &kp LSFT(KC_0) &kp LSFT(KC_9) &kp LSFT(KC_8) &kp LSFT(KC_7) &kp LSFT(KC_6)
                &kp KC_MINUS &kp KC_0 &kp KC_9 &kp KC_8 &kp KC_7 &kp KC_6
                &kp LSFT(KC_EQUAL) &kp KC_RBRACKET &kp LSFT(KC_RBRACKET) &kp KC_EQUAL &kp LSFT(KC_LBRACKET) &kp KC_LBRACKET
                &none &none &none &kp KC_DELETE &kp MO(3) &kp KC_TRNS
            >;
        };

        RSE {
            bindings = <
                &kp KC_F1 &kp KC_F2 &kp KC_F3 &kp KC_F4 &kp KC_F5 &kp KC_F6
                &kp KC_NO &kp KC_NO &kp KC_NO &kp KC_NO &kp KC_NO &kp KC_NO
                &kp KC_NO &kp KC_NO &kp KC_NO &kp KC_NO &kp KC_NO &kp KC_NO
                &none &none &none &kp KC_TRNS &kp MO(3) &kp KC_TRNS
                &kp KC_F12 &kp KC_F11 &kp KC_F10 &kp KC_F9 &kp KC_F8 &kp KC_F7
                &kp KC_NO &kp KC_NO &kp KC_RIGHT &kp KC_UP &kp KC_DOWN &kp KC_LEFT
                &kp KC_NO &kp KC_NO &kp KC_NO &kp KC_NO &kp KC_NO &kp KC_NO
                &none &none &none &kp KC_TRNS &kp KC_TRNS &kp KC_TRNS
            >;
        };

        ADJ {
            bindings = <
                &kp RESET &kp KC_NO &kp KC_NO &kp KC_BRIU &kp KC_MNXT &kp KC_VOLU
                &kp KC_NO &kp KC_NO &kp KC_NO &kp KC_BRID &kp KC_MPRV &kp KC_VOLD
                &kp KC_NO &kp KC_NO &kp KC_NO &kp KC_PSCREEN &kp KC_MSTP &kp KC_MPLY
                &none &none &none &kp KC_TRNS &kp KC_TRNS &kp KC_TRNS
                &kp KC_NO &kp KC_NO &kp KC_BTN2 &kp KC_BTN3 &kp KC_BTN1 &kp KC_NO
                &kp KC_NO &kp KC_NO &kp KC_MS_R &kp KC_MS_U &kp KC_MS_D &kp KC_MS_L
                &kp RGB_TOG &kp KC_NO &kp KC_WH_R &kp KC_WH_U &kp KC_WH_D &kp KC_WH_L
                &none &none &none &kp KC_TRNS &kp KC_TRNS &kp KC_TRNS
            >;
        };
    };
};
