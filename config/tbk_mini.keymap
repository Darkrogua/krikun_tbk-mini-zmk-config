/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/* Automatically generated layer name #define */
#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3
#define NAV 4


/* Custom Defined Behaviors */
/ {
    behaviors {
      lh_pht: home_row_left_mod_tap {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <150>;
        quick-tap-ms = <200>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <6 7 8 9 10 11>;
      };

      rh_pht: home_row_right_mod_tap {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <150>;
        quick-tap-ms = <200>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <0 1 2 3 4 5>;
      };
    };
};

/* Automatically generated macro definitions */
/ {
    macros {

    };
};


/ {

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB  &kp Q  &kp W  &kp E  &kp R  &kp T  &kp Y  &kp U  &kp I  &kp O  &kp P  &kp LEFT_BRACE  &kp CAPS  &kp A  &lh_pht LEFT_GUI S  &lh_pht LALT D  &lh_pht LCTRL F  &lh_pht LEFT_SHIFT G  &rh_pht RIGHT_SHIFT H  &rh_pht RCTRL J  &rh_pht RIGHT_ALT K  &rh_pht RIGHT_GUI L  &kp SEMI  &kp DOUBLE_QUOTES  &kp GRAVE  &kp Z  &kp X  &kp C  &kp V  &kp B  &kp N  &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp RIGHT_BRACE  &kp ESC  &sl 1  &kp SPACE  &kp ENTER  &sl 2  &kp BACKSPACE
            >;
        };

        lower_layer {
            bindings = <
&kp GRAVE  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp N7  &kp N8  &kp N9  &kp N0  &kp MINUS  &kp CAPS  &kp N1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5  &kp NUMBER_6  &kp N7  &kp N8  &kp N9  &kp N0  &kp MINUS  &kp ESC  &kp SLASH  &kp LS(LESS_THAN)  &kp LS(BACKSLASH)  &kp LS(GREATER_THAN)  &kp PIPE  &kp LEFT_BRACE  &kp LS(LEFT_BRACKET)  &kp PLUS  &kp LS(RIGHT_BRACE)  &kp RIGHT_BRACE  &kp PLUS  &trans  &trans  &trans  &trans  &sl 3  &kp DEL
            >;
        };

        raise_layer {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12  &none  &none  &none  &none  &none  &none  &kp LEFT  &kp DOWN  &kp UP_ARROW  &kp RIGHT  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &trans  &sl 3  &trans  &trans  &trans  &trans
            >;
        };

        adjust_layer {
            bindings = <
&kp C_RESET  &none  &none  &none  &none  &kp C_VOLUME_UP  &none  &none  &none  &none  &none  &bootloader  &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &kp C_VOLUME_DOWN  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR  &studio_unlock  &studio_unlock  &none  &kp PRINTSCREEN  &none  &kp C_PLAY_PAUSE  &none  &none  &none  &none  &none  &sys_reset  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
