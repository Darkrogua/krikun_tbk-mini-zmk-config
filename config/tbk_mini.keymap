/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3
#define NAV 4

&lt { quick-tap-ms = <200>; };

&mt { quick-tap-ms = <200>; };

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri-layer {
            if-layers = <1 2>;
            then-layer = <5>;
        };

        tri-layer1 {
            if-layers = <5 1>;
            then-layer = <5>;
        };
    };

    behaviors {
        lh_pht: lh_pht {
            compatible = "zmk,behavior-hold-tap";
            label = "LH_PHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
        };

        rh_pht: rh_pht {
            compatible = "zmk,behavior-hold-tap";
            label = "RH_PHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB  &kp Q  &kp W  &kp E  &kp R  &kp T  &kp Y  &kp U  &kp I  &kp O  &kp P  &kp LEFT_BRACKET  &kp CAPS  &kp A  &lh_pht LGUI S  &lh_pht LALT D  &lh_pht LCTRL F  &lh_pht LEFT_SHIFT G  &rh_pht RIGHT_SHIFT H  &rh_pht RCTRL J  &rh_pht RIGHT_ALT K  &rh_pht RGUI L  &kp SEMI  &kp SQT  &kp GRAVE  &kp Z  &kp X  &kp C  &kp V  &kp B  &kp N  &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp RIGHT_BRACKET  &kp ESC  &kp SPACE  &sl 1  &kp ENTER  &kp BACKSPACE  &sl 2
            >;
        };

        lower_layer {
            bindings = <
&kp GRAVE  &kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)  &kp LS(NUMBER_4)  &kp LS(NUMBER_5)  &kp LS(NUMBER_6)  &kp LS(N7)  &kp LS(N8)  &kp LS(N9)  &kp LS(N0)  &kp LS(MINUS)  &kp CAPS  &kp N1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5  &kp NUMBER_6  &kp N7  &kp N8  &kp N9  &kp N0  &kp MINUS  &kp ESC  &kp SLASH  &kp LS(LESS_THAN)  &kp BACKSLASH  &kp LS(GREATER_THAN)  &kp PIPE  &kp LEFT_BRACE  &kp LS(LEFT_BRACE)  &kp EQUAL  &kp LS(RIGHT_BRACE)  &kp RIGHT_BRACE  &kp PLUS  &trans  &trans  &trans  &trans  &sl 3  &kp DEL
            >;
        };

        raise_layer {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12  &none  &none  &kp C_PREV  &kp C_PLAY_PAUSE  &kp C_NEXT  &kp C_VOLUME_UP  &kp LEFT  &kp DOWN  &kp UP_ARROW  &kp RIGHT  &none  &none  &none  &none  &none  &kp PRINTSCREEN  &none  &kp C_VOLUME_DOWN  &none  &none  &none  &none  &none  &none  &trans  &sl 3  &trans  &trans  &trans  &trans
            >;
        };

        adjust_layer {
            bindings = <
&kp C_RESET  &none  &none  &none  &none  &kp C_VOLUME_UP  &none  &none  &none  &none  &none  &bootloader  &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &kp C_VOLUME_DOWN  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR  &studio_unlock  &studio_unlock  &none  &kp PRINTSCREEN  &none  &kp C_PLAY_PAUSE  &none  &none  &none  &none  &none  &sys_reset  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
